    # Create documentation pack index
    pushd $PACKAGEDIR >/dev/null
    rm -f packages.xml
    touch packages.xml

    echo -e "<?xml version=\"1.0\" standalone=\"yes\" ?>"                   >> packages.xml
    echo -e "<documentationPackIndex>"                                      >> packages.xml
    echo -e "\t<meta>"                                                      >> packages.xml
    echo -e "\t\t<timestamp>$(date +"%s")</timestamp>"                      >> packages.xml
    echo -e "\t\t<date>$(date +"%F %T")</date>"                             >> packages.xml
    echo -e "\t</meta>"                                                     >> packages.xml
    echo -e "\t<languagePackIndex>"                                         >> packages.xml

    for p in $(find . -name \*.zip | sort);
    do
            local _VERSION=$(echo $p | $SED_EXTENDED "s/.*-([0-9.]*|latest)-([a-z-]*)\.zip\$/\1/")
            local _LANGUAGE=$(echo $p | $SED_EXTENDED "s/.*-([0-9.]*|latest)-([a-z-]*)\.zip\$/\2/")
            if [ "$_LANGUAGE" != "default" ]; then
                _LANGUAGE=$(echo $_LANGUAGE | sed 's/..$/\U&/' | sed 's/-/_/')
            fi
            echo -e "\t\t<languagepack version=\"$_VERSION\" language=\"$_LANGUAGE\">" >> packages.xml
            echo -e "\t\t\t<md5>$(md5sum $p | cut -d" " -f1)</md5>"         >> packages.xml
            echo -e "\t\t</languagepack>"                                   >> packages.xml
    done

    echo -e "\t</languagePackIndex>"                                        >> packages.xml
    echo -e "</documentationPackIndex>"                                     >> packages.xml

    popd >/dev/null
